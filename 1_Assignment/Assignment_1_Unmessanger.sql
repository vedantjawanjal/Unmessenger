#CREATE DATABASE ORG;
#USE ORG;

CREATE TABLE Customers (
CustomerID INT PRIMARY KEY,
Name VARCHAR(255),
Email VARCHAR(255),
JoinDate DATE
);

CREATE TABLE Products (
ProductID INT PRIMARY KEY,
Name VARCHAR(255),
Category VARCHAR(255),
Price DECIMAL(10, 2)
);

CREATE TABLE Orders (
OrderID INT PRIMARY KEY,
CustomerID INT,
OrderDate DATE,
TotalAmount DECIMAL(10, 2),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID)
);

CREATE TABLE OrderDetails (
OrderDetailID INT PRIMARY KEY,
OrderID INT,
ProductID INT,
Quantity INT,
PricePerUnit DECIMAL(10, 2),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID)
);

INSERT INTO Customers (CustomerID, Name, Email, JoinDate) VALUES
(1, 'John Doe', 'johndoe@example.com', '2020-01-10'),
(2, 'Jane Smith', 'janesmith@example.com', '2020-01-15'),
(3, 'Bob Johnson', 'bobjohnson@example.com', '2020-02-02'),
(4, 'Emily Davis', 'emilydavis@example.com', '2020-02-20'),
(5, 'Michael Brown', 'michaelbrown@example.com', '2020-02-25'),
(6, 'Sarah White', 'sarahwhite@example.com', '2020-03-01'),
(7, 'David Wilson', 'davidwilson@example.com', '2020-03-02'),
(8, 'Olivia Martinez', 'oliviamartinez@example.com', '2020-03-03'),
(9, 'Christopher Lee', 'christopherlee@example.com', '2020-03-04'),
(10, 'Alice Johnson', 'alicejohnson@example.com', '2020-03-05');

INSERT INTO Products (ProductID, Name, Category, Price) VALUES
(1, 'Laptop', 'Electronics', 999.99),
(2, 'Smartphone', 'Electronics', 499.99),
(3, 'Headphones', 'Electronics', 79.99),
(4, 'Coffee Maker', 'Appliances', 129.99),
(5, 'Running Shoes', 'Fashion', 89.99),
(6, 'Bluetooth Speaker', 'Electronics', 59.99),
(7, 'Digital Camera', 'Electronics', 349.99),
(8, 'Toaster', 'Appliances', 39.99),
(9, 'Backpack', 'Fashion', 49.99),
(10, 'Desk Lamp', 'Home Decor', 29.99);

INSERT INTO Orders (OrderID, CustomerID, OrderDate, TotalAmount) VALUES
(1, 1, '2020-02-15', 1499.98),
(2, 2, '2020-02-17', 499.99),
(3, 3, '2020-02-20', 299.95),
(4, 4, '2020-02-22', 539.99),
(5, 5, '2020-02-25', 189.99),
(6, 6, '2020-03-01', 124.99),
(7, 7, '2020-03-05', 789.99),
(8, 8, '2020-03-10', 99.99),
(9, 9, '2020-03-15', 349.99),
(10, 10, '2020-03-21', 78.99);

INSERT INTO OrderDetails (OrderDetailID, OrderID, ProductID, Quantity, PricePerUnit) VALUES
(1, 1, 1, 1, 999.99),
(2, 1, 2, 1, 499.99),
(3, 2, 3, 2, 79.99),
(4, 3, 4, 1, 129.99),
(5, 4, 5, 1, 89.99),
(6, 5, 6, 1, 59.99),
(7, 6, 7, 1, 349.99),
(8, 7, 8, 2, 39.99),
(9, 8, 9, 3, 49.99),
(10, 9, 10, 2, 29.99);
INSERT INTO OrderDetails (OrderDetailID, OrderID, ProductID, Quantity, PricePerUnit) VALUES
(11, 2, 1, 1, 999.99),
(12, 4, 7, 1, 349.99),
(13, 7, 8, 2, 39.99),
(14, 8, 8, 3, 39.99),
(15, 9, 8, 2, 39.99);


# 1. Basic Queries:
# 1.1. List all customers.
SELECT * FROM customers;

#1.2. Show all products in the 'Electronics' category.
SELECT * 
FROM products
WHERE lower(Category) = 'electronics';

#1.3. Find the total number of orders placed.
SELECT count(*) AS Total_Orders_placed
FROM orders;

#1.4. Display the details of the most recent order.
SELECT * 
FROM orderdetails
WHERE OrderDetailID = (
SELECT  OrderID
FROM orders
order by OrderDate desc
limit 1
);

#2. Joins and Relationships:
#2.1. List all products along with the names of the customers who ordered them.

Select p.Name as product_name,c.Name as customer_name
FROM products p
INNER JOIN OrderDetails od
ON p.ProductID = od.ProductID
INNER JOIN orders o ON 
od.OrderID = o.OrderID
INNER JOIN customers c ON 
o.customerID = c.customerID;

#2.2. Show orders that include more than one product.

SELECT count(od.OrderID) as "Count of Products", od.OrderID, OrderDate, TotalAmount
FROM orderdetails od
INNER JOIN orders o ON
od.OrderID = o.OrderID
GROUP BY 2,3,4
having count(od.OrderID) > 1; 

#2.3. Find the total sales amount for each customer.
SELECT sum(TotalAmount) as Total_sales, CustomerID
FROM orders
GROUP BY CustomerID;

#3. Aggregation and Grouping:
#3.1. Calculate the total revenue generated by each product category.

select Category, sum(Price) as 'Total Revenue by Category'
from orderdetails 
inner join products  on 
products.ProductID = orderdetails.ProductID
group by 1
;

#3.2. Determine the average order value.

SELECT avg(TotalAmount) as "Average Order Value"
FROM orders;

#3.3. Find the month with the highest number of orders

SELECT count(orderid) as "Highest Order",month(OrderDate) 
FROM orders
group by 2
ORDER BY 2 desc;

#4. Subqueries and Nested Queries:
#4.1. Identify customers who have not placed any orders.

select CustomerID as 'Customer Not Places Any Order' 
from customers 
where CustomerID not in (
select CustomerID from orders);

#4.2. Find products that have never been ordered.
select ProductID as 'Products that never Ordered' 
from products 
where ProductID not in (
select ProductID from orderdetails);

#4.3. Show the top 3 best-selling products
SELECT products.ProductID, Name, total_sold
FROM (
    SELECT ProductID, SUM(Quantity) AS total_sold
    FROM orderdetails
    GROUP BY ProductID
    ORDER BY total_sold DESC
    LIMIT 3
) AS top_selling
JOIN products ON top_selling.ProductID = products.ProductID;

#5. Date and Time Functions:
#5.1. List orders placed in the last month.
SELECT *
FROM orders
WHERE MONTH(OrderDate) = Month(DATE_SUB(curdate(), INTERVAL 1 MONTH));

#5.2. Determine the oldest customer in terms of membership duration
select * from customers order by JoinDate limit 1 ;

#6. Advanced Queries:
#6.1. Rank customers based on their total spending.
SELECT
    CustomerID,
    SUM(TotalAmount) AS total_spending,
    RANK() OVER (ORDER BY SUM(TotalAmount) DESC) AS spending_rank
FROM
    orders
GROUP BY
    CustomerID
ORDER BY
    total_spending DESC;

#6.2. Identify the most popular product category.
SELECT category,count(category),sum(quantity)
FROM products
Inner join orderdetails ON
products.ProductID=orderdetails.ProductID
group by 1
order by 3 desc limit 1;

#6.3. Calculate the month-over-month growth rate in sales
SELECT
    DATE_FORMAT(current_month, '%Y-%m') AS month,
    COALESCE(
        ROUND(
            (current_month_total - LAG(current_month_total) OVER (ORDER BY DATE_FORMAT(current_month, '%Y-%m'))) /
            NULLIF(LAG(current_month_total) OVER (ORDER BY DATE_FORMAT(current_month, '%Y-%m')), 0) * 100,
            2
        ),
        0
    ) AS growth_rate
FROM (
    SELECT
        DATE_FORMAT(OrderDate, '%Y-%m-01') AS current_month,
        SUM(TotalAmount) AS current_month_total
    FROM
        Orders
    GROUP BY
        DATE_FORMAT(OrderDate, '%Y-%m-01')
) monthly_sales
ORDER BY
    DATE_FORMAT(current_month, '%Y-%m');



#7. Data Manipulation and Updates:
#7.1. Add a new customer to the Customers table.

INSERT INTO Customers (CustomerID, Name, Email, JoinDate) VALUES
(12, 'Vedant Jawanjal', 'vj@example.com', '2024-01-12');

#7.2. Update the price of a specific product.

update products set price = 40.00 where Name = 'Toaster';
set sql_safe_updates = 0;



